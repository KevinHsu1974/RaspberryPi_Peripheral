--------------------------------------------------------------------------------------

Program Name: RTC/I2C testing for "RaspberryPi 3"

--------------------------------------------------------------------------------------
Overview: This program is built to read the system time information generated by RTC chip
          (EPSON RTC-8564) via I2C interface. In BCM2837/2835, since I2C pins is multiplexed 
          with GPIO interface, correct confiuration of GPIO is needed to enable I2C interface. 

Flow Chart:

    [Set up peripheral memory mapping, configure GPIO to enable I2C pins] ->

    [Enable BSC(Broadcom Serial Controller) to support I2C functionality] ->

    [Configure RTC-8564 and reset its status bit] ->

    [Read time information from RTC-8564] ->

    [Display the information in console]

--------------------------------------------------------------------------------------
Key files/modules:

(1). RPI3.h: To define physical address of GPIO and BSC0 (i.e. Use BSC0 but not BSC1 at this program)
             Refer to page.5 of "BCM2835-ARM-Peripherals_RaspberryPi.pdf" for details.


(2). 2837mmu.h: 
     a. To define mmap structure for accommodating variables of file description(fd), physical address, 
        virtual address.
     b. provide reference for functions "setup_io" and "release_io" which are used to get/release memory mapping. 

(3). 2837mmu.c: To define the funtionality of setup_io and release_io functions.
     a. setup_io: To map physical address to virtual address for peripherals.
     b. release_io: Release the I/O mapping.

(4). I2C.c

(4). RTC.c: Main function to setup I/O mapping and execute the DRAM testing with 2 different patterns.
     a. Test patterns: 0x9999999 , 0x5555555.
     b. Test range: (RAM_TESTSIZE x 4) Byte. The maximum value of RAM_TESTSIZE is 64MB.
     b. Test routine: Write to every 32-bit data into DRAM and read the result to check if they are
                      identical. If no, error counter will increment.

-------------------------------------------------------------------------------------
How to use:
(1). use "make" to generate the "DRAM_TEST" exectable ELF file
(2). execute "DRAM_TEST" in command line to see the test result of error counter.